generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_AIVEN")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  provider      String
  pId           String?
  role          String?    @default("user")
  otpExpireDate String?
  otp           String?
  password      String?
  picUrl        String?
  picName       String?
  desc          String?
  gender        String?
  order         Order[]
  createdAt     DateTime   @default(now())
  chatroom      Chatroom[]
  Wishlist      Wishlist[]
  reels         Reel[]
  Reviews       Reviews[]
  comments      Comments[]
  coins         Coins[]
  views         Views[]
  likes         Likes[]
}

model Admin {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  createdAt DateTime @default(now())
}

model Product {
  id              String              @id @default(uuid())
  no              Int                 @default(autoincrement())
  name            String
  desc            String
  price           Int
    discountPercent Int?                @default(0)
    salePrice       Int?
    isOnSale        Boolean             @default(false)
  saleEndDate     DateTime?
  colour          String[]
  size            String[]
  picUrl          String[]
  tags            String[]
  isAvalible      Boolean             @default(true)
  brand           Brand?              @relation(fields: [brandId], references: [id], onDelete: SetNull)
  brandId         String?
  catagory        Catagory?           @relation(fields: [catagoryId], references: [id], onDelete: SetNull)
  catagoryId      String?
  reviews         Reviews[]
  order           Jun_Product_Order[]
  createdAt       DateTime            @default(now())
}

model Order {
  id            String              @id @default(uuid())
  no            Int                 @default(autoincrement())
  createdAt     DateTime            @default(now())
  User          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  paymentMethod String?
  status        Order_Status        @default(pending)
  totalPrice    Float?
  products      Jun_Product_Order[]
  address       String?
  country       String?
  city          String?
  postalCode    String?
  extraInfo     String?
  phoneNumber   String?
}

model Message {
  id         String   @id @default(uuid())
  no         Int      @default(autoincrement())
  room       Chatroom @relation(fields: [chatroomId], references: [id])
  createdAt  DateTime @default(now())
  chatroomId String
  data       String
  mimeType   String
}

model Chatroom {
  id        String    @id @default(uuid())
  no        Int       @default(autoincrement())
  createdAt DateTime  @default(now())
  Message   Message[]
  user      User[]
}

model Reviews {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Wishlist {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  // products  Product[]
  createdAt DateTime @default(now())
  userId    String
}

model Brand {
  id      String    @id @default(uuid())
  name    String
  desc    String?
  picUrl  String
  Product Product[]
}

model Catagory {
  id      String    @id @default(uuid())
  name    String
  picUrl  String?
  desc    String?
  Product Product[]
}

model Reel {
  id            String     @id @default(uuid())
  desc          String
  videoUrl      String
  User          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  viewCount     Int?       @default(0)
  likeCount     Int?       @default(0)
  commentsCount Int?       @default(0)
  views         Views[]
  comments      Comments[]
  Likes         Likes[]
}

model Storage {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  name      String
  url       String
  mimieType String
  type      String
  userId    String
  createdAt DateTime @default(now())
}

model Comments {
  id      String  @id @default(uuid())
  message String
  Reels   Reel?   @relation(fields: [reelId], references: [id])
  reelId  String?
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?

  @@unique([reelId, userId])
}

model Coins {
  id     String       @id @default(uuid())
  value  Int
  desc   String?
  User   User?        @relation(fields: [userId], references: [id])
  userId String?
  type   Transaction? @default(earn)
}

model Points {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  desc  String?
  value Int
}

model CoinMileStone {
  id        String   @id @default(uuid())
  objType   String
  objId     String
  mileStone Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([objId, objType])
}

model Views {
  id     String @id @default(uuid())
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Reel   Reel   @relation(fields: [reelId], references: [id], onDelete: Cascade)
  reelId String

  @@unique([userId, reelId])
}

model Likes {
  id     String @id @default(uuid())
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Reel   Reel   @relation(fields: [reelId], references: [id], onDelete: Cascade)
  reelId String

  @@unique([userId, reelId])
}

// ----------------------->
// Junction tabels
// ----------------------->

model Jun_User_ChatRoom {
  id String @id @default(uuid())
  no Int    @default(autoincrement())
}

model Jun_Product_Order {
  id        String  @id @default(uuid())
  no        Int     @default(autoincrement())
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  quantity  Int
  colour    String?
  size      String?
}

model Jun_Product_WishList {
  id String @id @default(uuid())
  no Int    @default(autoincrement())
}

// ----------------------->
// emums
// ----------------------->

enum User_Role {
  admin
  buyer
  subAdmin
}

enum Order_Status {
  pending
  processing
  refunding
  refunded
  rejecting
  delivered
}

enum Transaction {
  earn
  spend
}

enum PaymentMethod {
  stripe
  paypal
  cod
}
