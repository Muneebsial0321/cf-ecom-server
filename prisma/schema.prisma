generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  no            Int        @default(autoincrement())
  name          String
  email         String     @unique
  provider      String
  pId           String
  role          String?    @default("user")
  // 
  //extras 
  // 
  otpExpireDate String?
  otp           String?
  password      String?
  picUrl        String?
  picName       String?
  desc          String?
  gender        String?
  // Shop          Shop?
  order         Order[]
  createdAt     DateTime   @default(now())
  chatroom      Chatroom[]
  Wishlist      Wishlist[]
}

model Admin {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  createdAt DateTime @default(now())
}

// model Shop {
//   id        String    @id @default(uuid())
//   no        Int       @default(autoincrement())
//   name      String
//   desc      String
//   user      User      @relation(fields: [userId], references: [id])
//   userId    String    @unique
//   createdAt DateTime  @default(now())
//   Product   Product[]
// }

model Product {
  id         String              @id @default(uuid())
  no         Int                 @default(autoincrement())
  name       String
  desc       String
  // shop       Shop      @relation(fields: [shopId], references: [id])
  // shopId     String
  price      Int
  colour     String[]
  size       String[]
  picUrl     String[]
  tags       String[]
  reviews    Reviews[]
  order      Jun_Product_Order[]
  isAvalible Boolean             @default(true)
  createdAt  DateTime            @default(now())
}

model Order {
  id            String              @id @default(uuid())
  no            Int                 @default(autoincrement())
  createdAt     DateTime            @default(now())
  User          User                @relation(fields: [userId], references: [id])
  userId        String
  paymentMethod String?
  totalPrice    Float?
  products      Jun_Product_Order[]
}



model Message {
  id         String   @id @default(uuid())
  no         Int      @default(autoincrement())
  room       Chatroom @relation(fields: [chatroomId], references: [id])
  createdAt  DateTime @default(now())
  chatroomId String
  data       String
  mimeType   String
}

model Chatroom {
  id        String    @id @default(uuid())
  no        Int       @default(autoincrement())
  createdAt DateTime  @default(now())
  Message   Message[]
  user      User[]
}

model Reviews {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  itemId    String
  userId    String
  ratings   String
  message   String
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Wishlist {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  // products  Product[]
  createdAt DateTime @default(now())
  userId    String
}

model Storage {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  name      String
  url       String
  mimieType String
  type      String
  userId    String
  createdAt DateTime @default(now())
}

model Jun_User_ChatRoom {
  id String @id @default(uuid())
  no Int    @default(autoincrement())
}

model Jun_Product_Order {
  id        String   @id @default(uuid())
  no        Int      @default(autoincrement())
  Product   Product @relation(fields: [productId], references: [id])
  productId String
  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Jun_Product_WishList {
  id String @id @default(uuid())
  no Int    @default(autoincrement())
}
